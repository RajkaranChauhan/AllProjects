package stepDefinations;

import java.io.IOException;
import java.util.List;
import java.util.Map;

import org.apache.poi.openxml4j.exceptions.InvalidFormatException;
import org.junit.Assert;

import com.qa.driverFactory.DriverFactory;
import com.qa.util.ExcelReader;

import io.cucumber.datatable.DataTable;
import io.cucumber.java.en.Given;
import io.cucumber.java.en.Then;
import pages.BasketPage;
import pages.CheckoutPage;
import pages.ShopPage;

public class CheckoutPageSteps {

	private CheckoutPage checkoutPage;
	private ExcelReader excelReader;

	BasketPage basketPage = new BasketPage(DriverFactory.getDriver());

	/*
	 * @Given("From index page the user is navigated to the MyAccount page.") public
	 * void from_index_page_the_user_is_navigated_to_the_my_account_page() {
	 * 
	 * }
	 * 
	 * @Then("In My Account page user logged into the applicaton using credentials user name {string} and password {string} and lands in Home Page"
	 * ) public void
	 * in_my_account_page_user_logged_into_the_applicaton_using_credentials_user_name_and_password_and_lands_in_home_page
	 * (String string, String string2) {
	 * 
	 * }
	 * 
	 * @Then("From Home page user is navigated  to the Shop page") public void
	 * from_home_page_user_is_navigated_to_the_shop_page() {
	 * 
	 * }
	 * 
	 * @Then("From the Shop the user will be navigated to the basket page") public
	 * void from_the_shop_the_user_will_be_navigated_to_the_basket_page() {
	 * 
	 * }
	 */
	@Then("From the basket page user will navigato to Checkout Page")
	public void from_the_basket_page_user_will_navigato_to_checkout_page() {
		checkoutPage = basketPage.navigateToCheckout();
	}

//	@Then("Update the billing address using excel file  from given sheetname \"Sheet1\"	and rowNumber {int}")
//	public void update_the_billing_address_using_excel_file_from_given_sheetname_sheet1_and_row_number(Integer int1) {
	@Then("Update the billing address using excel file  from given sheetname {string}	and rowNumber {int}")
	public void update_the_billing_address_using_excel_file_from_given_sheetname_and_row_number(String sheetName,Integer rowNum) throws InvalidFormatException, IOException 
	{
		String excelPath="D:\\Dev\\Selenium\\PracticeAutomationTestingDotIn\\src\\test\\resources\\Excel.xlsx";
		String excelPath2=System.getProperty("user.dir")+"\\src\\test\\resources\\Excel.xlsx";
		System.out.println("The excel path is : "+excelPath);
		System.out.println("The excel path2 is : "+excelPath2);
		
		excelReader= new ExcelReader();
		List<Map<String, String>> testData = excelReader.getData(excelPath, sheetName);
		String first_Name =testData.get(rowNum).get("FirstName");
		String last_Name=testData.get(rowNum).get("LastName");
		String company_Nmae=testData.get(rowNum).get("CompanyName");
		String email_Address=testData.get(rowNum).get("Email");
		String phoneNo=testData.get(rowNum).get("Phone");
		String country1=testData.get(rowNum).get("Country");
		String billing_Address_1=testData.get(rowNum).get("Address");
		String city=testData.get(rowNum).get("Town/City");
		String state1=testData.get(rowNum).get("State");
		String post_code=testData.get(rowNum).get("Postcode");
		String order_Notes=testData.get(rowNum).get("OrderNotes");
		
		checkoutPage.getFillBillingDetailsText(first_Name, last_Name, company_Nmae, email_Address, phoneNo, billing_Address_1, city, post_code, order_Notes, country1, state1);
		
		
		
		
	
	}

	@Given("user gets the title of Checkout page")
	public void user_gets_the_title_of_checkout_page() {

		System.out.println("The title of the Chekout page is : " + checkoutPage.getPageTitle());
	}

	@Then("Verify the order details.")
	public void verify_the_order_details(DataTable expectedOrderDetails) {
		String yourOrderProduct = null;
		String[] yourOrderProduct1 = checkoutPage.getYourOrderProduct().split("Ã—");

		for (String e : yourOrderProduct1) {
			// e.indexOf(0)
			System.out.println("The split string: " + e.trim());
			yourOrderProduct = e.trim();
			break;
		}

		System.out.println("The string : " + yourOrderProduct);

		String yourOrderProductQuantity = checkoutPage.getYourOrderProductQuantity();
		yourOrderProductQuantity = yourOrderProductQuantity.substring(2);
		System.out.println("The actual quantity in page: " + yourOrderProductQuantity);

		List<List<String>> expOrderDetails = expectedOrderDetails.asLists(String.class);
		for (List<String> ele : expOrderDetails) {
			System.out.println("your product details");
			System.out.println("Exp: " + ele.get(0));
			System.out.println("Actual:" + yourOrderProduct);

			if (ele.get(0).trim().equalsIgnoreCase(yourOrderProduct))
			// if (yourOrderProduct1.toString().contains(ele.get(0)))
			{
				System.out.println(
						"The expected product is: " + ele.get(0) + " And the Actual product is: " + yourOrderProduct);
				// System.out.println("The expected qantity product is: "+ ele.get(1)+ " And the
				// Actual product quantity is: "+ yourOrderProductQuantity);

				if (Integer.parseInt(ele.get(1).trim()) == Integer.parseInt((yourOrderProductQuantity).trim())) {
					System.out.println("The expected product quantity is: " + ele.get(1)
							+ " And the Actual product quantity is: " + yourOrderProductQuantity);
					Assert.assertTrue(true);
				} else {
					System.out.println("The quantity of product doesnot mattch in Your details section");
					System.out.println("The expected quantity: " + ele.get(1));
					System.out.println("The actual quantity: " + yourOrderProductQuantity);
					Assert.assertTrue(false);
				}
			} else {
				System.out.println("The product doesnot mattch in Your details section");
				Assert.assertTrue(false);
			}

		}

	}

	@Then("verify the title of the Checkout page is {string}")
	public void verify_the_title_of_the_checkout_page_is(String expectedTitleOfPage) {

		
		Assert.assertTrue(expectedTitleOfPage.equalsIgnoreCase(checkoutPage.getPageTitle()));
	}

	@Then("user places order by clicking on the button Place Order.")
	public void user_places_order_by_clicking_on_the_button_place_order() {
		checkoutPage.getPlaceOrder();
	}
	@Then("user selects the payement method as Cash on Delivery")
	public void user_selects_the_payement_method_as_Cash_on_Delivery() throws InterruptedException {
		checkoutPage.getCashOnDelivery();
	}

	@Then("user navigates to the Order Confirmation page veriyf the page title is {string}")
	public void user_navigates_to_the_order_confirmation_page_veriyf_the_page_title_is(String orderConfiramtionPageTille) {
		
		Assert.assertTrue(checkoutPage.getPageTitle().equalsIgnoreCase(orderConfiramtionPageTille));
	}

	@Then("the Order Confirmation page has text as {string}")
	public void the_order_confirmation_page_has_text_as(String orderConirmationText) {
		
		
		Assert.assertEquals(checkoutPage.getOrderConfirmationText(), orderConirmationText);
	}

}
